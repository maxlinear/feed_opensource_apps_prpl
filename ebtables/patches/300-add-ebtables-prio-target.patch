--- a/extensions/Makefile
+++ b/extensions/Makefile
@@ -1,7 +1,7 @@
 #! /usr/bin/make
 
 EXT_FUNC+=802_3 nat arp arpreply ip ip6 standard log redirect vlan mark_m mark \
-          pkttype stp among limit ulog nflog string
+          pkttype stp among limit ulog nflog string prio
 EXT_TABLES+=filter nat broute
 EXT_OBJS+=$(foreach T,$(EXT_FUNC), extensions/ebt_$(T).o)
 EXT_OBJS+=$(foreach T,$(EXT_TABLES), extensions/ebtable_$(T).o)
--- /dev/null
+++ b/extensions/ebt_prio.c
@@ -0,0 +1,176 @@
+/*
+ * ebtable priority target can be used in any chain
+ *
+ */
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <getopt.h>
+#include "../include/ebtables_u.h"
+#include <netinet/ether.h>
+#include <linux/netfilter_bridge/ebt_prio.h>
+
+#define OPT_SET_PRIO     0x01
+#define OPT_DSCP_PRIO    0x02
+#define OPT_PCP_PRIO     0x04
+#define OPT_PRIO_PCP     0x08
+
+static struct option opts[] =
+{
+	{ "set-prio"          , required_argument, 	0, OPT_SET_PRIO  },
+	{ "set-dscp-prio"     , no_argument, 		0, OPT_DSCP_PRIO },
+	{ "set-pcp-prio"      , no_argument, 		0, OPT_PCP_PRIO  },
+	{ "set-prio-pcp"      , no_argument, 		0, OPT_PRIO_PCP  },
+	{ 0 }
+};
+
+static void print_help()
+{
+	printf(
+	"prio options:\n"
+	" --set-prio  <0-7>     : Set default priority\n"
+	" --set-dscp-prio       : Use global table dscp to priority\n"
+	" --set-pcp-prio        : Use global table vlan pcp to priority\n"
+	" --set-prio-pcp        : Use global table priority to vlan pcp\n"
+	);
+}
+
+static void init(struct ebt_entry_target *target)
+{
+	struct ebt_prio_info *info = (struct ebt_prio_info *)target->data;
+
+	info->bitmask = 0;
+	info->target = EBT_ACCEPT;
+}
+
+static int parse(int c, char **argv, int argc,
+	const struct ebt_u_entry *entry, unsigned int *flags,
+	struct ebt_entry_target **target)
+{
+	struct ebt_prio_info *info = (struct ebt_prio_info *)(*target)->data;
+	char *end;
+	switch (c) {
+	case OPT_SET_PRIO:
+		ebt_check_option2(flags, OPT_SET_PRIO);
+		info->default_prio = strtoul(optarg, &end, 0);
+		if (*end != '\0' || end == optarg)
+		{
+			ebt_print_error2("Bad value '%s'", optarg);
+		}
+		info->bitmask = OPT_SET_PRIO;
+		break;
+	case OPT_DSCP_PRIO:
+		ebt_check_option2(flags, OPT_DSCP_PRIO);
+		info->bitmask = OPT_DSCP_PRIO;
+		break;
+	case OPT_PCP_PRIO:
+		ebt_check_option2(flags, OPT_PCP_PRIO);
+		info->bitmask = OPT_PCP_PRIO;
+		break;
+	case OPT_PRIO_PCP:
+		ebt_check_option2(flags, OPT_PRIO_PCP);
+		info->bitmask = OPT_PRIO_PCP;
+		break;
+	default:
+		return 0;
+	}
+	return 1;
+}
+
+static inline const char * index2name(int index)
+{
+	int i;
+	for (i=0;i<sizeof(opts);i++)
+	{
+		if ((1<<i) & index)
+		{
+			return opts[i].name;
+		}
+	}
+	return "";
+}
+
+static void final_check(const struct ebt_u_entry *entry,
+	const struct ebt_entry_target *target, const char *name,
+	unsigned int hookmask, unsigned int time)
+{
+	struct ebt_prio_info *info = (struct ebt_prio_info *)target->data;
+
+	CLEAR_BASE_CHAIN_BIT;
+
+	/* checking input parameters to validate the command completely or error out */
+	/* function ebt_print_error print error message and exit from application */
+	if (strcmp(name, "nat"))
+	{
+		ebt_print_error("Extension prio work only with NAT table");
+	} else if (hookmask & ~(1 << NF_BR_PRE_ROUTING | 1 << NF_BR_POST_ROUTING))
+	{
+		ebt_print_error("Wrong selected chain");
+	} else if ((hookmask & (1 << NF_BR_PRE_ROUTING)) && (info->bitmask & ~(OPT_SET_PRIO | OPT_DSCP_PRIO | OPT_PCP_PRIO)))
+	{
+		ebt_print_error("Wrong subcommand %s for PREROUTING chain", index2name(info->bitmask));
+	} else if ((hookmask & (1 << NF_BR_POST_ROUTING)) &&  (info->bitmask & ~(OPT_PRIO_PCP)))
+	{
+		ebt_print_error("Wrong subcommand %s for POSTROUTING chain", index2name(info->bitmask));
+	} else if ((info->bitmask & (OPT_PRIO_PCP | OPT_PCP_PRIO)) && (entry->ethproto != ETH_P_8021Q))
+	{
+		ebt_print_error("For set-pcp-prio or set-prio-pcp the protocol must be specified as 802_1Q");
+	} else if ((info->bitmask & (OPT_DSCP_PRIO)) && (entry->ethproto != ETH_P_IP) && (entry->ethproto != ETH_P_IPV6))
+	{
+		ebt_print_error("For set-dscp-prio the protocol must be specified as IPv4 or IPv6");
+	}
+}
+
+static void print(const struct ebt_u_entry *entry,
+	const struct ebt_entry_target *target)
+{
+	struct ebt_prio_info *info = (struct ebt_prio_info *)target->data;
+
+	if (info->bitmask & OPT_SET_PRIO)
+	{
+		printf("--set-prio %d ",info->default_prio);
+	}
+	if (info->bitmask & OPT_DSCP_PRIO)
+	{
+		printf("--set-dscp-prio ");
+	}
+	if (info->bitmask & OPT_PCP_PRIO)
+	{
+		printf("--set-pcp-prio ");
+	}
+	if (info->bitmask & OPT_PRIO_PCP)
+	{
+		printf("--set-prio-pcp ");
+	}
+}
+
+static int compare(const struct ebt_entry_target *t1,
+   const struct ebt_entry_target *t2)
+{
+	struct ebt_prio_info *info1 = (struct ebt_prio_info *)t1->data;
+	struct ebt_prio_info *info2 = (struct ebt_prio_info *)t2->data;
+
+	return
+		info1->bitmask 		== info2->bitmask &&
+		info1->default_prio == info2->default_prio &&
+		info1->target 		== info2->target;
+}
+
+static struct ebt_u_target prio_target =
+{
+	.name			= "prio",
+	.size			= sizeof(struct ebt_prio_info),
+	.help			= print_help,
+	.init			= init,
+	.parse			= parse,
+	.final_check	= final_check,
+	.print			= print,
+	.compare		= compare,
+	.extra_ops		= opts,
+};
+
+__attribute__((constructor)) static void extension_init(void)
+{
+	ebt_register_target(&prio_target);
+}
--- /dev/null
+++ b/include/linux/netfilter_bridge/ebt_prio.h
@@ -0,0 +1,18 @@
+/*
+ * ebtable priority target can be used in any chain
+ *
+ */
+
+#ifndef __LINUX_BRIDGE_EBT_PRIO_H
+#define __LINUX_BRIDGE_EBT_PRIO_H
+
+#include <linux/if_ether.h>
+
+struct ebt_prio_info {
+	int bitmask;
+	int default_prio;
+	/* EBT_ACCEPT, EBT_DROP, EBT_CONTINUE or EBT_RETURN */
+	int target;
+};
+
+#endif /* ! __LINUX_BRIDGE_EBT_PRIO_H */
--- a/useful_functions.c
+++ b/useful_functions.c
@@ -59,8 +59,7 @@ void ebt_print_mac(const unsigned char *
 		for (j = 0; j < ETH_ALEN; j++)
 			printf("%02x%s", mac[j],
 				(j==ETH_ALEN-1) ? "" : ":");
-	} else
-		printf("%s", ether_ntoa((struct ether_addr *) mac));
+	}
 }
 
 void ebt_print_mac_and_mask(const unsigned char *mac, const unsigned char *mask)
