diff --git a/CMakeLists.txt b/CMakeLists.txt
index efbca17..c74eb20 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -78,6 +79,7 @@ OPTION(HAVE_SENDMMSG "Enable/Disable use of SendMMsg()" ON)
 OPTION(HAVE_RECVMMSG "Enable/Disable use of RecvMMsg()" ON)
 OPTION(HAVE_GSO "Enable/Disable use of Generic Segmentation Offload (GSO)" ON)
 OPTION(RATE_LIMITING "Enable/Disable rate limiting via bandwidth management" OFF)
+OPTION(MXL_OPT "Maxlinear optimizations" ON)

 add_definitions(-DSYSCONFDIR=\"${CMAKE_INSTALL_PREFIX}/etc\")
 add_definitions(-DLOCALSTATEDIR=\"${CMAKE_INSTALL_PREFIX}/var/lib\")
diff --git a/config.h.cmake b/config.h.cmake
index 8b42b67..9e271b3 100644
--- a/config.h.cmake
+++ b/config.h.cmake
@@ -2,6 +2,7 @@
 #define CONFIG_H

 #define SOFTWARE_VER "@SOFTWARE_VER@"
+#define MXL_RV_VER "@MXL_RV_VER@"
 #cmakedefine HAVE_GETIFADDRS
 #cmakedefine HAVE_LIBSSL
 #cmakedefine HAVE_LIBZ
@@ -18,5 +19,6 @@
 #cmakedefine HAVE_RECVMMSG
 #cmakedefine DISABLE_INT_TIMER
 #cmakedefine RATE_LIMITING
+#cmakedefine MXL_OPT

 #endif /* CONFIG_H */
diff --git a/udpst.c b/udpst.c
index 1980456..8e84336 100644
--- a/udpst.c
+++ b/udpst.c
@@ -105,6 +105,13 @@
 #include "../udpst_alt2.h"
 #endif

+#if defined(MXL_OPT)
+#include <netinet/if_ether.h>
+#include <netinet/ip.h>
+#include <stdbool.h>
+#include <netinet/udp.h>
+#include <netinet/ip6.h>
+#endif
 //----------------------------------------------------------------------------
 //
 // Internal function prototypes
@@ -236,11 +243,35 @@ int main(int argc, char **argv) {
         // Print banner or initialize JSON output object
         //
         if (!conf.jsonOutput) {
+#ifdef MXL_OPT
+                var = sprintf(scratch, SOFTWARE_TITLE "\nSoftware Ver: %s, MxL Rev Ver: %s, Protocol Ver: %d, Built: " __DATE__ " " __TIME__ "\n",
+                        SOFTWARE_VER, MXL_RV_VER, PROTOCOL_VER);
+                var = write(outputfd, scratch, var);
+                if (repo.isServer) {
+                        var = sprintf(scratch, "Mode: Server, Jumbo Datagrams: %s", boolText[conf.jumboStatus]);
+                        if (conf.groStatus)
+                                var += sprintf(&scratch[var], ", GRO Status: Enabled");
+                        else
+                                var += sprintf(&scratch[var], ", GRO Status: Disabled");
+                } else {
+                        var += sprintf(&scratch[var], ", Protocol Ver: %d", PROTOCOL_VER); // Client is always the latest
+                        var = sprintf(scratch, "Mode: Client, Jumbo Datagrams: %s", boolText[conf.jumboStatus]);
+                        if (conf.sendmmsgFlag)
+                                var += sprintf(&scratch[var], ", Transmission type: Sendmmsg");
+                        else
+                                var += sprintf(&scratch[var], ", Transmission type: Sendmsg");
+                        if (conf.gsoStatus)
+                                var += sprintf(&scratch[var], ", GSO Status: Enabled");
+                        else
+                                var += sprintf(&scratch[var], ", GSO Status: Disabled");
+                }
+#else
                 var = sprintf(scratch, SOFTWARE_TITLE "\nSoftware Ver: %s", SOFTWARE_VER);
                 if (repo.isServer)
                         var += sprintf(&scratch[var], ", Protocol Ver: %d-%d", PROTOCOL_MIN, PROTOCOL_VER);
                 else
                         var += sprintf(&scratch[var], ", Protocol Ver: %d", PROTOCOL_VER); // Client is always the latest
+#endif
                 var += sprintf(&scratch[var], ", Built: " __DATE__ " " __TIME__);
 #ifdef RATE_LIMITING
                 var += sprintf(&scratch[var], ", Rate Limiting via '-B mbps'");
@@ -271,11 +302,11 @@ int main(int argc, char **argv) {
                 var += sprintf(&scratch[var], ", Optimizations:");
 #ifdef HAVE_SENDMMSG
                 var += sprintf(&scratch[var], " SendMMsg()");
-#ifdef HAVE_GSO
+#if defined(HAVE_GSO) && !defined(MXL_OPT)
                 var += sprintf(&scratch[var], "+GSO");
 #endif // HAVE_GSO
 #endif // HAVE_SENDMMSG
-#ifdef HAVE_RECVMMSG
+#if defined (HAVE_RECVMMSG) && !defined(MXL_OPT)
                 var += sprintf(&scratch[var], " RecvMMsg()+Trunc");
 #endif // HAVE_RECVMMSG
                 scratch[var++] = '\n';
@@ -763,7 +794,11 @@ void signal_exit(int signal) {
 //
 int proc_parameters(int argc, char **argv, int fd) {
         int i, j, var, value;
+#if defined(MXL_OPT)
+        char *lbuf, *optstring = "ud46C:x1envsgGf:jTDXSB:ri:oRa:m:I:t:P:p:A:b:L:U:F:c:h:z:q:E:Ml:k:?";
+#else
         char *lbuf, *optstring = "ud46C:x1evsf:jTDXSB:ri:oRa:m:I:t:P:p:A:b:L:U:F:c:h:q:E:Ml:k:?";
+#endif

         //
         // Clear configuration and global repository data
@@ -777,6 +812,9 @@ int proc_parameters(int argc, char **argv, int fd) {
         value            = opterr;
         opterr           = 0;
         conf.controlPort = DEF_CONTROL_PORT;
+#if defined(MXL_OPT)
+        conf.sendmmsgFlag = TRUE;
+#endif
         while ((i = getopt(argc, argv, optstring)) != -1) {
                 switch (i) {
                 case 'u':
@@ -923,6 +961,15 @@ int proc_parameters(int argc, char **argv, int fd) {
                         conf.addrFamily = AF_INET6;
                         conf.ipv6Only   = TRUE;
                         break;
+#if defined(MXL_OPT)
+                case 'z':
+                        value = atoi(optarg);
+                        if ((var = param_error(value, 1, ETH_DATA_LEN)) > 0) {
+                                var = write(fd, scratch, var);
+                                return -1;
+                        }
+                        conf.mtuSize = value;
+#endif
                 case 'C':
                         if (repo.isServer) {
                                 var = sprintf(scratch, "ERROR: Multi-connection count only set by client\n");
@@ -1011,6 +1058,11 @@ int proc_parameters(int argc, char **argv, int fd) {
                 case 'X':
                         conf.randPayload = TRUE;
                         break;
+#if defined(MXL_OPT)
+                case 'n':
+                        conf.sendmmsgFlag = FALSE;
+                        break;
+#endif
                 case 'S':
                         conf.showSendingRates = TRUE;
                         break;
@@ -1069,6 +1121,14 @@ int proc_parameters(int argc, char **argv, int fd) {
                         return -1;
 #endif
                         break;
+#if defined(MXL_OPT)
+                case 'g':
+                        conf.groStatus = TRUE;
+                        break;
+                case 'G':
+                        conf.gsoStatus = TRUE;
+                        break;
+#endif
                 case 'm':
                         // Server will use as configured maximum
                         value = (int) strtol(optarg, NULL, 0); // Allow hex values (0x00-0xff)
@@ -1270,6 +1330,11 @@ int proc_parameters(int argc, char **argv, int fd) {
                                       "       -6           Use only IPv6 address family (AF_INET6)\n"
                                       "(c)    -C cnt[-max] Multi-connection count [Default %d per server]\n"
                                       "(s)    -x           Execute server as background (daemon) process\n"
+#if defined(MXL_OPT)
+                                      "(s)    -g           Receive GRO on the server side\n"
+                                      "       -n           Disable sendmmsg and enable sendmsg\n"
+                                      "(c)    -z mtusize   MTU Size of the network [Default 1500]\n"
+#endif
                                       "(s)    -1           Server exits after one test execution\n"
                                       "(e)    -e           Disable suppression of socket (send/receive) errors\n"
                                       "       -v           Enable verbose output messaging\n"
@@ -1288,6 +1353,9 @@ int proc_parameters(int argc, char **argv, int fd) {
                                       "       -i count     Display bimodal maxima (specify initial sub-intervals)\n"
                                       "(c)    -o           Use One-Way Delay instead of RTT for delay variation\n"
                                       "(c)    -R           Include Out-of-Order/Duplicate datagrams\n"
+#if defined(MXL_OPT)
+                                      "(c)    -G           Set the sending type as GSO\n"
+#endif
                                       "       -a key       Authentication key (%d characters max)\n"
                                       "(m,v)  -m value     Packet marking octet (IP_TOS/IPV6_TCLASS) [Default %d]\n"
                                       "(m,i)  -I [%c]index  Index of sending rate (see '-S') [Default %c0 = <Auto>]\n"
@@ -1334,6 +1402,15 @@ int proc_parameters(int argc, char **argv, int fd) {
                 }
         }
 
+#if defined(MXL_OPT)
+        //
+        // Set the MTU Size for the transmission
+        //
+        if (!conf.mtuSize)
+                conf.mtuSize = ETH_DATA_LEN;
+        conf.mtuSize = conf.mtuSize - sizeof(struct udphdr);
+#endif
+
         //
         // Validate remaining parameters
         //
diff --git a/udpst.h b/udpst.h
index 8d87733..203473f 100644
--- a/udpst.h
+++ b/udpst.h
@@ -142,7 +142,11 @@
 //
 // Sending rate payload, protocol, and buffer sizes
 //
+#if defined(MXL_OPT)
+#define MAX_SENDING_RATES 1173              // Max rows in sending rate table
+#else
 #define MAX_SENDING_RATES 1153              // Max rows in sending rate table
+#endif
 #define BASE_SEND_TIMER1  MIN_INTERVAL_USEC // Base send timer, transmitter 1 (us)
 #define BASE_SEND_TIMER2  1000              // Base send timer, transmitter 2 (us)
 #define MAX_L3_PACKET     1250              // Max desired L3 packet size
@@ -157,6 +161,9 @@
 #define MAX_PAYLOAD_SIZE  (MAX_L3_PACKET - L3DG_OVERHEAD)
 #define MAX_JPAYLOAD_SIZE (MAX_JL3_PACKET - L3DG_OVERHEAD)
 #define MAX_TPAYLOAD_SIZE (MAX_TL3_PACKET - L3DG_OVERHEAD)
+#if defined(MXL_OPT)
+#define GSO_PAYLOAD_SIZE1  12465
+#endif
 //
 // Send buffer needs to contain all datagram payloads when not using GSO (or all segment buffers with GSO)
 //
@@ -224,6 +231,11 @@ struct configuration {
         BOOL jumboStatus;                // Enable/disable jumbo datagram sizes
         BOOL traditionalMTU;             // Traditional (1500 byte) MTU
         BOOL debug;                      // Enable debug messaging
+#if defined(MXL_OPT)
+        BOOL sendmmsgFlag;               // Send stream using sendmmsg
+        BOOL gsoStatus;                  // Enable/disable gso transmission
+        BOOL groStatus;                  // Enable/disable gro transmission - server
+#endif
         BOOL randPayload;                // Payload randomization
         int rateAdjAlgo;                 // Rate adjustment algorithm
         BOOL showSendingRates;           // Display sending rate table parameters
@@ -250,6 +262,9 @@ struct configuration {
         BOOL intfForMax;                 // Local interface used for maximum
         char intfName[IFNAMSIZ + 1];     // Local interface for supplemental stats
         int logFileMax;                  // Maximum log file size
+#if defined(MXL_OPT)
+        uint16_t mtuSize;                // Sizeof mtu to transmit the data;
+#endif
         char *logFile;                   // Name of log file
 };
 //----------------------------------------------------------------------------
diff --git a/udpst_control.c b/udpst_control.c
index 3610a64..5cb3be5 100644
--- a/udpst_control.c
+++ b/udpst_control.c
@@ -96,6 +96,16 @@
 #include "../udpst_control_alt2.h"
 #endif
 
+#if defined(MXL_OPT)
+#include <stdbool.h>
+#include <netinet/udp.h>
+
+#include <ifaddrs.h>
+#include <sys/ioctl.h>
+#include <netinet/ip6.h>
+#include <netinet/ip.h>
+#include <netinet/if_ether.h>
+#endif
 //----------------------------------------------------------------------------
 //
 // Internal function prototypes
@@ -120,6 +130,11 @@ extern char *rateAdjAlgo[];
 //
 extern cJSON *json_top, *json_output;
 
+#if defined(MXL_OPT)
+#ifndef UDP_GRO
+#define UDP_GRO 104
+#endif
+#endif
 //----------------------------------------------------------------------------
 //
 // Global data
@@ -927,7 +942,7 @@ int service_actreq(int connindex) {
                         testtype      = USTEST_TEXT;
                         c->rttMinimum = INITIAL_MIN_DELAY;
                         c->rttSample  = INITIAL_MIN_DELAY;
-#ifdef HAVE_RECVMMSG
+#if defined(HAVE_RECVMMSG) && !defined(MXL_OPT)
                         c->secAction = &service_recvmmsg;
 #else
                         c->secAction = &service_loadpdu;
@@ -1124,7 +1139,7 @@ int service_actresp(int connindex) {
                 testtype      = DSTEST_TEXT;
                 c->rttMinimum = INITIAL_MIN_DELAY;
                 c->rttSample  = INITIAL_MIN_DELAY;
-#ifdef HAVE_RECVMMSG
+#if defined(HAVE_RECVMMSG) && !defined(MXL_OPT)
                 c->secAction = &service_recvmmsg;
 #else
                 c->secAction = &service_loadpdu;
@@ -1574,6 +1589,17 @@ int new_conn(int activefd, char *host, int port, int type, int (*priaction)(int)
                                 init_conn(i, TRUE);
                                 return -1;
                         }
+#if defined(MXL_OPT)
+                        if (conf.gsoStatus) {
+                                int val1 = IP_PMTUDISC_DO;
+                                if(setsockopt(fd, SOL_IP, IP_MTU_DISCOVER, &val1, sizeof(val1)) < 0) {
+                                    var = sprintf(scratch, "[%d]SET IP_MTU_DISCOVER ERROR: %s\n", i, strerror(errno));
+                                    send_proc(errConn, scratch, var);
+                                    init_conn(i, TRUE);
+                                    return -1;
+                                }
+                        }
+#endif
                 }
                 //
                 // Get buffer values
@@ -1649,6 +1675,53 @@ int sock_connect(int connindex) {
         //
         return connected(connindex);
 }
+
+#if defined(MXL_OPT)
+void setMTUSize(int fd, int protocol) {
+        struct ifaddrs* ifaddr;
+        struct ifaddrs* ifa;
+        struct ifreq ifr;
+        socklen_t addr_len;
+        char *ifname;
+        struct sockaddr_storage addr;
+
+        addr_len = sizeof (addr);
+        if (getsockname(fd, (struct sockaddr*)&addr, &addr_len) < 0)
+                return;
+        getifaddrs(&ifaddr);
+
+        for (ifa = ifaddr; ifa != NULL; ifa = ifa->ifa_next)
+        {
+                if (ifa->ifa_addr) {
+                        if (ifa->ifa_addr->sa_family == AF_INET && addr.ss_family == AF_INET) {
+                                struct sockaddr_in* inaddr = (struct sockaddr_in*)ifa->ifa_addr;
+                                struct sockaddr_in* saddr = (struct sockaddr_in*)&addr;
+                                if ((inaddr->sin_addr.s_addr == saddr->sin_addr.s_addr) && ifa->ifa_name) {
+                                        goto end;
+                                }
+                        }
+                        else if (ifa->ifa_addr->sa_family == AF_INET6 && addr.ss_family == AF_INET6) {
+                                struct sockaddr_in6* inaddr6 = (struct sockaddr_in6*)ifa->ifa_addr;
+                                struct sockaddr_in6* saddr6 = (struct sockaddr_in6*)&addr;
+                                if (!(strcmp(inaddr6->sin6_addr.s6_addr, saddr6->sin6_addr.s6_addr)) && ifa->ifa_name) {
+                                        goto end;
+                                }
+                        }
+                }
+        }
+        if (!ifa->ifa_name)
+                goto end;
+
+        ifr.ifr_addr.sa_family = (protocol==IPPROTO_IP)?AF_INET:AF_INET6;
+        strncpy(ifr.ifr_name, ifa->ifa_name, sizeof(ifr.ifr_name));
+        if (ioctl(fd, SIOCGIFMTU, &ifr) != -1) {
+                conf.mtuSize -= (1500-ifr.ifr_mtu);
+        }
+end:
+        freeifaddrs(ifaddr);
+}
+#endif
+
 //----------------------------------------------------------------------------
 //
 // Socket connect completion handler
@@ -1705,6 +1778,10 @@ int connected(int connindex) {
         } else {
                 c->ipProtocol = IPPROTO_IP;
         }
+#if defined(MXL_OPT)
+        if (conf.gsoStatus)
+            setMTUSize(c->fd, c->ipProtocol);
+#endif
         return 0;
 }
 //----------------------------------------------------------------------------
diff --git a/udpst_data.c b/udpst_data.c
index dddf421..53af8e7 100644
--- a/udpst_data.c
+++ b/udpst_data.c
@@ -91,6 +91,7 @@
 #include <arpa/inet.h>
 #include <netinet/ip.h>  // For GSO support
 #include <netinet/udp.h> // For GSO support
+#include <stdbool.h>
 #ifdef AUTH_KEY_ENABLE
 #include <openssl/hmac.h>
 #include <openssl/x509.h>
@@ -158,6 +159,11 @@ extern char json_errbuf[STRING_SIZE];
 #define SERVER_DEBUG     "[%d]DEBUG Rate Adjustment " DEBUG_STATS " SRIndex: %d\n"
 static char scratch2[STRING_SIZE + 32]; // Allow for log file timestamp prefix
 static int mmsgDataSize[RECVMMSG_SIZE]; // Received data size of each message
+#if defined(MXL_OPT)
+#ifndef UDP_SEGMENT
+#define UDP_SEGMENT    103
+#endif
+#endif
 
 //----------------------------------------------------------------------------
 // Function definitions
@@ -219,8 +225,42 @@ static void _randomize_payload(char *buffer, unsigned int length) {
         }
 }
 
+#if defined(MXL_OPT)
+static void send_udp_segment_cmsg(struct cmsghdr *cm)
+{
+        uint16_t *valp;
+
+        cm->cmsg_level = SOL_UDP;
+        cm->cmsg_type = UDP_SEGMENT;
+        cm->cmsg_len = CMSG_LEN(sizeof(conf.mtuSize));
+        valp = (uint16_t *)CMSG_DATA(cm);
+        *valp = conf.mtuSize;
+}
+
+struct CMSG_CONTROL {
+        char control[CMSG_SPACE(sizeof(conf.mtuSize))];
+        size_t msg_controllen;
+};
+
+typedef struct CMSG_CONTROL CMSG_CTL;
+
+static CMSG_CTL initializeGSO() {
+        struct msghdr msg = {0};
+        struct cmsghdr *cmsg;
+        CMSG_CTL cctl = {0};
+
+        msg.msg_control = cctl.control;
+        msg.msg_controllen = sizeof(cctl.control);
+        cmsg = CMSG_FIRSTHDR(&msg);
+        send_udp_segment_cmsg(cmsg);
+        cctl.msg_controllen = CMSG_SPACE(sizeof(conf.mtuSize));
+        return cctl;
+
+}
+#endif
+
 #if defined(HAVE_SENDMMSG)
-#if defined(HAVE_GSO)
+#if defined(HAVE_GSO) && !defined(MXL_OPT)
 //
 // Send a burst of messages using GSO (Generic Segmentation Offload)
 //
@@ -233,7 +273,6 @@ static void _sendmmsg_gso(int connindex, int totalburst, int burstsize, unsigned
         struct mmsghdr mmsg[MMSG_SEGMENTS];
         struct iovec iov[MMSG_SEGMENTS];
         struct timespec tspecvar;
-
         //
         // Calculate RTT response delay
         //
@@ -366,6 +405,14 @@ static void _sendmmsg_burst(int connindex, int totalburst, int burstsize, unsign
         //
         // Prepare send structures
         //
+#if defined(MXL_OPT)
+        CMSG_CTL cctl;
+
+        if (conf.gsoStatus) {
+            cctl = initializeGSO();
+        }
+#endif
+
         memset(mmsg, 0, totalburst * sizeof(struct mmsghdr));
         if (c->randPayload) {
                 nextsndbuf = repo.sndBufRand;
@@ -392,6 +439,16 @@ static void _sendmmsg_burst(int connindex, int totalburst, int burstsize, unsign
                 iov[i].iov_len             = (size_t) uvar;
                 mmsg[i].msg_hdr.msg_iov    = &iov[i];
                 mmsg[i].msg_hdr.msg_iovlen = 1;
+#if defined(MXL_OPT)
+                if (conf.gsoStatus) {
+                    mmsg[i].msg_hdr.msg_name   = (void *)&(repo.remSas);
+                    mmsg[i].msg_hdr.msg_namelen = sizeof(struct sockaddr_in);
+                    if (cctl.msg_controllen) {
+                        mmsg[i].msg_hdr.msg_control = cctl.control;
+                        mmsg[i].msg_hdr.msg_controllen = cctl.msg_controllen;
+                    }
+                }
+#endif
                 nextsndbuf += payload;
         }
 
@@ -443,7 +500,13 @@ static void _sendmsg_burst(int connindex, int totalburst, int burstsize, unsigne
         //
         // Prepare send structures
         //
-        memset((void *) &msg, 0, sizeof(struct msghdr));
+#if defined(MXL_OPT)
+        CMSG_CTL cctl;
+        if (conf.gsoStatus) {
+            cctl = initializeGSO();
+        }
+#endif
+        memset((void *)&msg, 0, sizeof(struct msghdr));
         if (c->randPayload) {
                 lHdr = (struct loadHdr *) repo.sndBufRand;
         } else {
@@ -470,7 +533,12 @@ static void _sendmsg_burst(int connindex, int totalburst, int burstsize, unsigne
                 iov.iov_len    = (size_t) uvar;
                 msg.msg_iov    = &iov;
                 msg.msg_iovlen = 1;
-
+#if defined(MXL_OPT)
+                if (conf.gsoStatus && cctl.msg_controllen) {
+                    msg.msg_control = cctl.control;
+                    msg.msg_controllen = cctl.msg_controllen;
+                }
+#endif
                 //
                 // Send a single message of our burst with a system call
                 //
@@ -653,16 +721,20 @@ int send_loadpdu(int connindex, int transmitter) {
         if (addon > 0)
                 totalburst++;
 
+#if defined(MXL_OPT)
+        if(conf.sendmmsgFlag)
+                _sendmmsg_burst(connindex, totalburst, burstsize, payload, addon);
+        else
+                _sendmsg_burst(connindex, totalburst, burstsize, payload, addon);
+#else
 #if defined(HAVE_SENDMMSG)
 #if defined(HAVE_GSO)
         _sendmmsg_gso(connindex, totalburst, burstsize, payload, addon);
 #else
         _sendmmsg_burst(connindex, totalburst, burstsize, payload, addon);
 #endif // HAVE_GSO
-#else
-        _sendmsg_burst(connindex, totalburst, burstsize, payload, addon);
 #endif // HAVE_SENDMMSG
-
+#endif // MXL_OPT
         return 0;
 }
 //----------------------------------------------------------------------------
diff --git a/udpst_srates.c b/udpst_srates.c
index 01b26ef..7d397e3 100644
--- a/udpst_srates.c
+++ b/udpst_srates.c
@@ -191,6 +191,33 @@ int def_sending_rates(void) {
                 jmax    = 11;
                 payload = MAX_PAYLOAD_SIZE;
         }
+#ifdef MXL_OPT
+        for (j = jmax; repo.maxSendingRates < MAX_SENDING_RATES-18; j++) {
+                sr              = &repo.sendingRates[repo.maxSendingRates++];
+                sr->txInterval1 = BASE_SEND_TIMER1;
+                sr->udpPayload1 = payload;
+                if (j < MAX_BURST_SIZE)
+                        sr->burstSize1 = j;
+                else
+                        sr->burstSize1 = MAX_BURST_SIZE;
+                sr->txInterval2 = 0;
+                sr->udpPayload2 = 0;
+                sr->burstSize2  = 0;
+                sr->udpAddon2   = 0;
+        }
+        /* MXL sending rated */
+        for (i = -1; i < 16; i++) {
+                sr              = &repo.sendingRates[repo.maxSendingRates++];
+                sr->txInterval1 = BASE_SEND_TIMER1;
+                sr->udpPayload1 = (GSO_PAYLOAD_SIZE1*(1.25+(0.25*i)))+((i*10)+10);
+                sr->burstSize1  = 1;
+        }
+        i = 15;
+        sr              = &repo.sendingRates[repo.maxSendingRates++];
+        sr->txInterval1 = BASE_SEND_TIMER1;
+        sr->udpPayload1 = (GSO_PAYLOAD_SIZE1*(1.25+(0.25*i)))+((i*10)+10);
+        sr->burstSize1  = 2;
+#else
         for (j = jmax; repo.maxSendingRates < MAX_SENDING_RATES; j++) {
                 sr              = &repo.sendingRates[repo.maxSendingRates++];
                 sr->txInterval1 = BASE_SEND_TIMER1;
@@ -204,6 +231,7 @@ int def_sending_rates(void) {
                 sr->burstSize2  = 0;
                 sr->udpAddon2   = 0;
         }
+#endif
 
         //
         // Sanity check table
@@ -248,7 +276,15 @@ void show_sending_rates(int fd) {
         for (i = 0, sr = repo.sendingRates; i < repo.maxSendingRates; i++, sr++) {
                 dvar = 0;
                 bvar = FALSE; // Is randomization in use
-                //
+#ifdef MXL_OPT
+                if (i == 1155) {
+                    var = sprintf(scratch, "\n--------------------------- MXL Sending Rate(GSO) ---------------------------\n");
+                    var = write(fd, scratch,var);
+                    var = sprintf(scratch, "--------------------------- This needs remote side adapations as well--------\n\n");
+                    var = write(fd, scratch,var);
+               }
+#endif
+                //
                 // Process all three send options
                 //
                 for (j = 0; j < 3; j++) {
